//Name: Ravi Thanarajah
//Date: 07/23/2023
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import java.applet.Applet;
import java.applet.*;
import java.util.*;
import java.text.*;
public class TicTacToeApp extends Applet implements ActionListener
{

    AudioClip soundFile;
    //For screens
    Panel p_card;
    Panel card1, card2, card3, card4;
    CardLayout cdLayout = new CardLayout ();

    //Game screen
    JLabel turnPic, playerturn;
    JButton a, b, c, d, ee, f, g, h, i;
    int board[] [] = {{0, 0, 0}, {0, 0, 0}, {0, 0, 0}};
    int winner = 0;
    char turn = 'x';
    String n1 = "";
    String n2 = "";
    JTextField choice, name, first;

    //Formatting
    Color backgroundColour = new Color (84, 110, 145);
    Color buttonColour = new Color (246, 248, 210);
    Color buttonText = new Color (58, 75, 99);
    Color titleColour = Color.white;
    Color promptColour = Color.white;
    Font titleFont = new Font ("Segoe UI Black", Font.PLAIN, 30);
    Font promptFont = new Font ("Segoe UI Black", Font.PLAIN, 15);
    Dimension boardSquare = new Dimension (96, 96);

    public void init ()
    {
        p_card = new Panel ();
        p_card.setLayout (cdLayout);
        // Screens
        opening ();
        instructions ();
        settings ();
        gameScreen ();
        resize (350, 500);
        setLayout (new BorderLayout ());
        add ("Center", p_card);
        soundFile = getAudioClip (getDocumentBase (), "poke.snd");
        soundFile.loop ();
    }


    public void opening ()
    { 
        // Opening
        card1 = new Panel ();
        card1.setBackground (backgroundColour);
        JLabel title = new JLabel (createImageIcon ("title.png"));
        JLabel back = new JLabel (createImageIcon ("startback1.png"));
        JButton next = new JButton ("Enter");
        next.setPreferredSize (new Dimension (300, 50));
        next.setActionCommand ("2");
        next.addActionListener (this);
        next.setBackground (buttonColour);
        next.setForeground (buttonText);
        card1.add (title);
        card1.add (back);
        card1.add (next);
        p_card.add ("1", card1);
    }


    public void instructions ()
    {
        // Instructions
        card2 = new Panel ();
        card2.setBackground (backgroundColour);
        JLabel title = new JLabel (createImageIcon ("Instructions.png"));
        title.setFont (titleFont);
        title.setForeground (titleColour);
        Panel p = new Panel ();
        JButton settings = new JButton ("Settings");
        settings.setActionCommand ("3");
        settings.addActionListener (this);
        settings.setPreferredSize (new Dimension (150, 50));
        settings.setBackground (buttonColour);
        settings.setForeground (buttonText);
        JButton gameScreen = new JButton ("Game");
        gameScreen.setActionCommand ("4");
        gameScreen.addActionListener (this);
        gameScreen.setPreferredSize (new Dimension (150, 50));
        gameScreen.setBackground (buttonColour);
        gameScreen.setForeground (buttonText);

        card2.add (title);
        p.add (settings);
        p.add (gameScreen);
        card2.add (p);
        p_card.add ("2", card2);
    }


    public void settings ()
    {
        // Settings
        card3 = new Panel ();
        card3.setBackground (backgroundColour);
        JLabel title = new JLabel ("Choose your settings:");
        title.setFont (titleFont);
        title.setForeground (titleColour);

        Panel p = new Panel ();
        JLabel gif = new JLabel (createImageIcon ("settings.gif"));
        JLabel namePmt = new JLabel ("Player 1:");
        namePmt.setFont (promptFont);
        name = new JTextField (10);
        name.setFont (promptFont);

        Panel p2 = new Panel ();
        JLabel choicePmt = new JLabel ("Player 2");
        choicePmt.setFont (promptFont);
        choice = new JTextField (10);
        choice.setFont (promptFont);

        JButton entrance = new JButton ("To the game");
        entrance.setActionCommand ("4");
        entrance.addActionListener (this);
        entrance.setPreferredSize (new Dimension (300, 50));
        entrance.setBackground (buttonColour);
        entrance.setForeground (buttonText);

        card3.add (title);
        card3.add (gif);
        p.add (namePmt);
        p.add (name);
        p2.add (choicePmt);
        p2.add (choice);


        card3.add (p);
        card3.add (p2);
        card3.add (entrance);
        p_card.add ("3", card3);
    }


    public void gameScreen ()
    {
        // GameScreen
        card4 = new Panel ();
        card4.setBackground (backgroundColour);
        JLabel title = new JLabel (createImageIcon ("title2.png"));
        title.setFont (titleFont);
        title.setForeground (titleColour);

        Panel p = new Panel ();
        JLabel curturn = new JLabel ("Current Turn:");
        curturn.setFont (promptFont);
        curturn.setForeground (titleColour);

        playerturn = new JLabel ("Player 1 Name");
        playerturn.setFont (promptFont);
        playerturn.setForeground (titleColour);

        turnPic = new JLabel (createImageIcon ("xturn.png"));
        p.add (curturn);
        p.add (turnPic);
        p.add (playerturn);

        // Game Board
        Panel p2 = new Panel (new GridLayout (3, 3));
        p2.setBackground (backgroundColour);
        a = new JButton (createImageIcon ("b.png"));
        a.setActionCommand ("a");
        a.setBackground (backgroundColour);
        a.setPreferredSize (boardSquare);
        a.addActionListener (this);
        p2.add (a);
        b = new JButton (createImageIcon ("b.png"));
        b.setActionCommand ("b");
        b.setBackground (backgroundColour);
        b.setPreferredSize (boardSquare);
        b.addActionListener (this);
        p2.add (b);
        c = new JButton (createImageIcon ("b.png"));
        c.setActionCommand ("c");
        c.setBackground (backgroundColour);
        c.setPreferredSize (boardSquare);
        c.addActionListener (this);
        p2.add (c);
        d = new JButton (createImageIcon ("b.png"));
        d.setActionCommand ("d");
        d.setBackground (backgroundColour);
        d.setPreferredSize (boardSquare);
        d.addActionListener (this);
        p2.add (d);
        ee = new JButton (createImageIcon ("b.png"));
        ee.setActionCommand ("ee");
        ee.setBackground (backgroundColour);
        ee.setPreferredSize (boardSquare);
        ee.addActionListener (this);
        p2.add (ee);
        f = new JButton (createImageIcon ("b.png"));
        f.setActionCommand ("f");
        f.setBackground (backgroundColour);
        f.setPreferredSize (boardSquare);
        f.addActionListener (this);
        p2.add (f);
        g = new JButton (createImageIcon ("b.png"));
        g.setActionCommand ("g");
        g.setBackground (backgroundColour);
        g.setPreferredSize (boardSquare);
        g.addActionListener (this);
        p2.add (g);
        h = new JButton (createImageIcon ("b.png"));
        h.setActionCommand ("h");
        h.setBackground (backgroundColour);
        h.setPreferredSize (boardSquare);
        h.addActionListener (this);
        p2.add (h);
        i = new JButton (createImageIcon ("b.png"));
        i.setActionCommand ("i");
        i.setBackground (backgroundColour);
        i.setPreferredSize (boardSquare);
        i.addActionListener (this);
        p2.add (i);

        // Buttons
        Panel p3 = new Panel ();
        JButton reset = new JButton ("Again");
        reset.addActionListener (this);
        reset.setActionCommand ("reset");
        reset.setPreferredSize (new Dimension (100, 30));
        reset.setFont (new Font ("Segoe UI Black", Font.PLAIN, 13));
        reset.setBackground (buttonColour);
        reset.setForeground (buttonText);
        p3.add (reset);
        JButton instruct = new JButton ("Instructions");
        instruct.addActionListener (this);
        instruct.setActionCommand ("instruct");
        instruct.setPreferredSize (new Dimension (120, 30));
        instruct.setFont (new Font ("Segoe UI Black", Font.PLAIN, 13));
        instruct.setBackground (buttonColour);
        instruct.setForeground (buttonText);
        p3.add (instruct);
        JButton settings = new JButton ("Settings");
        settings.addActionListener (this);
        settings.setActionCommand ("settings");
        settings.setPreferredSize (new Dimension (100, 30));
        settings.setFont (new Font ("Segoe UI Black", Font.PLAIN, 13));
        settings.setBackground (buttonColour);
        settings.setForeground (buttonText);
        p3.add (settings);

        card4.add (title);
        card4.add (p);
        card4.add (p2);
        card4.add (p3);
        p_card.add ("4", card4);
    }


    public void flipTurn ()
    {
        n1 = name.getText ();
        n2 = choice.getText ();
        if (turn == 'x')
        {
            turn = 'o';
            turnPic.setIcon (createImageIcon ("oturn.png"));
            playerturn.setText (n2);
        }
        else
        {
            turn = 'x';
            turnPic.setIcon (createImageIcon ("xturn.png"));
            playerturn.setText (n1);
        }
    }


    public int pokemon (JButton x)
    {

        int y = (int) (Math.random () * 6);
        if (y == 1)
            x.setIcon (createImageIcon ("1.png"));
        else if (y == 2)
            x.setIcon (createImageIcon ("2.png"));
        else if (y == 3)
            x.setIcon (createImageIcon ("3.png"));
        else if (y == 4)
            x.setIcon (createImageIcon ("4.png"));
        else if (y == 5)
            x.setIcon (createImageIcon ("5.png"));
        else
            x.setIcon (createImageIcon ("6.png"));
        return y;
    }


    public void upDateSquare (int x, int y, JButton square)
    {
        int m = (int) (Math.random () * 6);

        board [x] [y] = m;
        if (m == 1)
            square.setIcon (createImageIcon ("1.png"));
        else if (m == 2)
            square.setIcon (createImageIcon ("2.png"));
        else if (m == 3)
            square.setIcon (createImageIcon ("3.png"));
        else if (m == 4)
            square.setIcon (createImageIcon ("4.png"));
        else if (m == 5)
            square.setIcon (createImageIcon ("5.png"));
        else
            square.setIcon (createImageIcon ("6.png"));
        flipTurn ();
    }


    public void actionPerformed (ActionEvent e)
    {
        // Action Command Screens
        if (e.getActionCommand ().equals ("1"))
            cdLayout.show (p_card, "1");
        else if (e.getActionCommand ().equals ("2"))
            cdLayout.show (p_card, "2");
        else if (e.getActionCommand ().equals ("3"))
            cdLayout.show (p_card, "3");
        else if (e.getActionCommand ().equals ("4"))
        {
            n1 = name.getText ();


            playerturn.setText (n1);

            cdLayout.show (p_card, "4");
        }

        // Action Command Button
        else if (e.getActionCommand ().equals ("reset"))
        {
            reset ();
        }
        else if (e.getActionCommand ().equals ("settings"))
        {
            cdLayout.show (p_card, "3");
        }
        else if (e.getActionCommand ().equals ("instruct"))
        {
            cdLayout.show (p_card, "2");
        }

        // Action Command Game Screen
        else
        {
            if (e.getActionCommand ().equals ("a"))
                upDateSquare (0, 0, a);
            else if (e.getActionCommand ().equals ("b"))
                upDateSquare (0, 1, b);
            else if (e.getActionCommand ().equals ("c"))
                upDateSquare (0, 2, c);
            else if (e.getActionCommand ().equals ("d"))
                upDateSquare (1, 0, d);
            else if (e.getActionCommand ().equals ("ee"))
                upDateSquare (1, 1, ee);
            else if (e.getActionCommand ().equals ("f"))
                upDateSquare (1, 2, f);
            else if (e.getActionCommand ().equals ("g"))
                upDateSquare (2, 0, g);
            else if (e.getActionCommand ().equals ("h"))
                upDateSquare (2, 1, h);
            else if (e.getActionCommand ().equals ("i"))
                upDateSquare (2, 2, i);
            win ();
        }
    }


    public void win ()
    {
        winner = 0;
        if (board [0] [0] == board [0] [1] && board [0] [0] == board [0] [2] && board [0] [0] != 0)
            winner = board [0] [0];
        else if (board [1] [0] == board [1] [1] && board [1] [0] == board [1] [2] && board [1] [0] != 0)
            winner = board [1] [0];
        else if (board [2] [0] == board [2] [1] && board [2] [0] == board [2] [2] && board [2] [0] != 0)
            winner = board [2] [0];
        else if (board [0] [0] == board [1] [0] && board [0] [0] == board [2] [0] && board [0] [0] != 0)
            winner = board [0] [0];
        else if (board [0] [1] == board [1] [1] && board [0] [1] == board [2] [1] && board [0] [1] != 0)
            winner = board [0] [1];
        else if (board [0] [2] == board [1] [2] && board [0] [2] == board [2] [2] && board [0] [2] != 0)
            winner = board [0] [2];
        else if (board [0] [0] == board [1] [1] && board [0] [0] == board [2] [2] && board [0] [0] != 0)
            winner = board [0] [0];
        else if (board [0] [2] == board [1] [1] && board [0] [2] == board [2] [0] && board [0] [2] != 0)
            winner = board [0] [2];

        if (winner == 99)
        {
            JOptionPane.showMessageDialog (null, "Tie", "Winner", JOptionPane.INFORMATION_MESSAGE);
        }
        else if (winner != 0 && turn == 'x')
        {
            JOptionPane.showMessageDialog (null, "Player 1 Wins", "Winner", JOptionPane.INFORMATION_MESSAGE);
        }
        else if (winner != 0 && turn == 'o')
        {
            JOptionPane.showMessageDialog (null, "Player 2 Wins", "Winner", JOptionPane.INFORMATION_MESSAGE);
        }

    }


    public void reset ()
    {
        a.setIcon (createImageIcon ("b.png"));
        b.setIcon (createImageIcon ("b.png"));
        c.setIcon (createImageIcon ("b.png"));
        d.setIcon (createImageIcon ("b.png"));
        ee.setIcon (createImageIcon ("b.png"));
        f.setIcon (createImageIcon ("b.png"));
        g.setIcon (createImageIcon ("b.png"));
        h.setIcon (createImageIcon ("b.png"));
        i.setIcon (createImageIcon ("b.png"));
        winner = 0;
        for (int i = 0 ; i < 3 ; i++)
        {
            for (int j = 0 ; j < 3 ; j++)
            {
                board [i] [j] = 0;
            }
        }
        turn = 'x';
    }



    protected static ImageIcon createImageIcon (String path)
    {
        java.net.URL imgURL = TicTacToeApp.class.getResource (path);
        if (imgURL != null)
        {
            return new ImageIcon (imgURL);
        }


        else
        {
            System.err.println ("Couldn't find file: " + path);
            return null;
        }
    }
}
